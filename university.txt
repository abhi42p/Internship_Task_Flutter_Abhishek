create database university;
use university;

create table Students(
student_id int primary key,
first_name varchar(100),
last_name varchar(100),
email varchar(100),
phone varchar(20),
date_of_birth date,
enrollment_date date,
department_id int,
foreign key (department_id) references Departments(department_id));

create table Courses(
course_id int primary key,
course_name varchar(100),
department_id int,
professor_id int,
credits int,
foreign key (department_id) references Departments(department_id),
foreign key (professor_id) references Professors(professor_id));

create table Departments(
department_id int primary key,
department_name varchar(100) );

create table Professors(
professor_id int primary key,
first_name varchar(100),
last_name varchar(100),
email varchar(100),
phone varchar(20));

create table Enrollments(
enrollment_id int primary key,
student_id int,
course_id int,
enrollment_date date,
grade varchar(5),
foreign key (student_id) references Students (student_id),
foreign key (course_id) references Courses (course_id));

insert into Departments(department_id, department_name) values 
(101,'CS'),(102,'EC'),(103,'IT');

insert into Professors(professor_id, first_name, last_name, email, phone) values
(1, 'Vijay', 'Kumar', 'vijay@gmail.com', '9876543210'),
(2, 'Ajay', 'Verma', 'ajay@gmail.com', '9876543211'),
(3, 'jay', 'Kumar', 'jay@gmail.com', '9876543212');

insert into Courses (course_id, course_name, department_id, professor_id, credits) VALUES
(1, 'Machine Learning', 101, 1, 4),
(2, 'Data Structure',101, 2, 3),
(3, 'BEEE', 102, 3, 4),
(4, 'Electronic Engineering', 102, 3, 4),
(5, 'Graphic Designing', 103, 1, 3),
(6, ' Animation', 103, 2, 3);

insert into Students (student_id, first_name, last_name, email, phone, date_of_birth, enrollment_date, department_id) VALUES
(1, 'Harsh', 'Mehta', 'harsh.mehta@gmail.com', '1234567890', '2002-05-10', '2020-08-01', 101),
(2, 'Raj', 'Kumar', 'raj.kumar@gmail.com', '1234567891', '2001-04-15', '2019-08-01', 102),
(3, 'Pooja', 'Verma', 'pooja.verma@gmail.com', '1234567892', '2003-06-20', '2021-08-01', 103),
(4, 'Arjun', 'Singh', 'arjun.singh@gmail.com', '1234567893', '2002-07-22', '2020-08-01', 101),
(5, 'Kiran', 'Sharma', 'kiran.sharma@gmail.com', '1234567894', '2001-12-11', '2019-08-01', 102),
(6, 'Neha', 'Kakkar', 'neha.shah@gmail.com', '1234567895', '2002-01-25', '2020-08-01', 103);

INSERT INTO Enrollments (enrollment_id, student_id, course_id, enrollment_date, grade) VALUES
(1, 1, 1, '2020-08-10', 'A'),
(2, 2, 2, '2019-08-12', 'B'),
(3, 3, 3, '2021-08-15', 'A'),
(4, 4, 4, '2020-08-14', 'B+'),
(5, 5, 5, '2019-08-18', 'C+'),
(6, 6, 6, '2020-08-10', 'A');


# Q1. Find the Total Number of Students in Each Department

select d.department_name, COUNT(s.student_id) as total_students
from students s join departments d on s.department_id = d.department_id
group by d.department_name;


# Q2. List All Courses Taught by a Specific Professor

select c.course_id, c.course_name, d.department_name
from courses c join departments d on c.department_id = d.department_id;


# Q3. Find the Average Grade of Students in Each Course  

select c.course_name,
    avg(
        case e.grade
            when 'A+' then 10
            when 'A' then 9
            when 'A-' then 8
            when 'B+' then 7
            when 'B' then 6
            when 'C' then 5
            else 0
            end )
            as average_grade
            from enrollments e
            join courses c on e.course_id = c.course_id
            group by c.course_name;
            
            
# Q4. List All Students Who Have Not Enrolled in Any Courses

select s.student_id, s.first_name, s.last_name, s.email from students s
left join enrollments e on s.student_id = e.student_id
where e.enrollment_id is null;


# Q5. Find the Number of Courses Offered by Each Department

select d.department_name, count(c.course_id) as total_courses
from courses c join departments d on c.department_id = d.department_id
group by d.department_name;


# Q6. List All Students Who Have Taken a Specific Course (e.g., 'Database Systems')

select s.student_id, s.first_name, s.last_name, s.email
from students s
join enrollments e on s.student_id = e.student_id
join courses c on e.course_id = c.course_id
where c.course_name = 'Data Structures';


# Q7. Find the Most Popular Course Based on Enrollment Numbers

select c.course_id, c.course_name, COUNT(e.enrollment_id) as total_enrollments
from enrollments e
join courses c on e.course_id = c.course_id
group by c.course_id, c.course_name
order by total_enrollments desc
limit 3;


# Q8. Find the Average Number of Credits Per Student in a Department

select d.department_name, avg(student_credits.total_credits) as avg_credits
from (
    select s.student_id, s.department_id, SUM(c.credits) as total_credits
    from students s
    join enrollments e on s.student_id = e.student_id
    join courses c on e.course_id = c.course_id
    group by s.student_id, s.department_id
) as student_credits
join departments d on student_credits.department_id = d.department_id
group by d.department_name;



# Q9. List All Professors Who Teach in More Than One Department

select p.professor_id, p.first_name, p.last_name, count(distinct c.department_id) as department_count
from professors p join courses c on p.professor_id = c.professor_id
group by p.professor_id, p.first_name, p.last_name
having count(distinct c.department_id) > 1;



# Q10. Get the Highest and Lowest Grade in a Specific Course (e.g., 'Operating Systems')


select max(case e.grade
            when 'A+' then 10
            when 'A' then 9
            when 'B+' then 8
            when 'B' then 7
            when 'C+' then 6
            when 'C' then 5
            else 0 end) AS highest_grade_point,
            
            min(
        case e.grade
            when 'A+' then 10
            when 'A' then 9
            when 'B+' then 8
            when 'B' then 7
            when 'C+' then 6
            when 'C' then 5
            else 0
        end ) as lowest_grade_point
from enrollments e
JOIN courses c on e.course_id = c.course_id
WHERE c.course_name = 'Machine Learning';
